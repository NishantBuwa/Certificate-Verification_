{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api.tatum.io"
    }
  ],
  "info": {
    "version": "1.1.2",
    "title": "Storage"
  },
  "tags": [
    {
      "name": "IPFS"
    },
    {
      "name": "Blockchain storage"
    }
  ],
  "paths": {
    "/v3/ipfs/{id}": {
      "get": {
        "description": "<p style=\"display: none\">/v3/ipfs/{id}</p>\n<h4>1 credit per API call.</h4><br/><p>Gets data from the IPFS.</p>",
        "operationId": "GetIPFSData",
        "parameters": [
          {
            "description": "IPFS CID of the file",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "QmXJJ6UF5WkF4WTJvsdhiA1etGwBLfpva7Vr9AudGMe3pj"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get file from IPFS",
        "tags": [
          "IPFS"
        ]
      }
    },
    "/v3/ipfs": {
      "post": {
        "description": "<p style=\"display: none\">/v3/ipfs</p>\n<h4>2 credits per API call. Only files up to 50MB are available for storing.</h4><br/>\n<p>Stores file on the IPFS. We are leveraging <a href=\"https://web3.storage/\" target=\"_blank\">web3.storage</a> from <a href=\"https://protocol.ai/\" target=\"_blank\">Protocol Labs</a> for free storage on the IPFS.</p>\n",
        "operationId": "StoreIPFS",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "example": 127654187631872620,
                    "description": "Your file to store"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ipfsHash": {
                      "type": "string",
                      "description": "IPFS CID identifier of the stored file."
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Store data to IPFS",
        "tags": [
          "IPFS"
        ]
      }
    },
    "/v3/record": {
      "post": {
        "description": "<p style=\"display: none\">/v3/record</p>\n<p><b>2 credits per API call + additional credits based on the size of the stored data and the type of the blockchain</b></p>\n<p>Store data on the blockchain.</p>\n<p>The total cost of a transaction on Ethereum (in credits) depends on the size of the data. The data is stored as a string in the hexadecimal format, and the maximum size of the data is approximately 130 kB on the mainnet and 30 kB on testnet. Every 5 characters cost 1 credit.<br/>\nTherefore, one API call with 1 kB of data (1024 characters) would cost 205 credits.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Elrond</li>\n<li>Ethereum (only the mainnet or the Sepolia testnet)</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>Polygon</li>\n<li>XDC</li>\n</ul>\n",
        "operationId": "StoreLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 130000,
                        "description": "The data to be stored on the blockchain",
                        "example": "My example log data"
                      },
                      "chain": {
                        "description": "The blockchain to store the data on",
                        "enum": [
                          "BSC",
                          "EGLD",
                          "ETH",
                          "KLAY",
                          "MATIC",
                          "ONE",
                          "XDC"
                        ],
                        "example": "ETH",
                        "type": "string"
                      },
                      "fromPrivateKey": {
                        "type": "string",
                        "maxLength": 66,
                        "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
                        "minLength": 66,
                        "description": "The private key of the blockchain address from which the transaction will be made and the transaction fee will be deducted"
                      },
                      "from": {
                        "type": "string",
                        "maxLength": 62,
                        "example": "erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7",
                        "minLength": 42,
                        "description": "(Elrond only; required) The blockchain address from which the transaction will be made<br/>This is a mandatory parameter for Elrond. Do not use it with any other blockchain."
                      },
                      "to": {
                        "description": "The blockchain address to store the data on<br/>If not provided, the data will be stored on the address from which the transaction is made.",
                        "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                      },
                      "nonce": {
                        "type": "number",
                        "minimum": 0,
                        "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
                      },
                      "fromShardID": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 4,
                        "description": "(Harmony only) The ID of the shard from which the data should be read"
                      },
                      "toShardID": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 4,
                        "description": "(Harmony only) The ID of the shard to which the data should be recorded"
                      },
                      "ethFee": {
                        "description": "(Ethereum only) The custom defined fee; if not present, will be calculated automatically",
                        "type": "object",
                        "required": [
                          "gasLimit",
                          "gasPrice"
                        ],
                        "properties": {
                          "gasPrice": {
                            "type": "string",
                            "description": "The price for one gas unit (in Gwei)",
                            "pattern": "^[+]?\\d+$",
                            "example": "20"
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                            "pattern": "^[+]?\\d+$",
                            "example": "40000"
                          }
                        }
                      }
                    },
                    "required": [
                      "data",
                      "chain",
                      "fromPrivateKey"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 130000,
                        "description": "The data to be stored on the blockchain",
                        "example": "My example log data"
                      },
                      "chain": {
                        "description": "The blockchain to store the data on",
                        "enum": [
                          "ETH"
                        ],
                        "example": "ETH",
                        "type": "string"
                      },
                      "signatureId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
                        "description": "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\n"
                      },
                      "index": {
                        "description": "Derivation index of sender address.",
                        "maximum": 2147483647,
                        "example": 0,
                        "type": "integer"
                      },
                      "to": {
                        "description": "The blockchain address to store the data on<br/>If not provided, the data will be stored on the address from which the transaction is made.",
                        "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                      },
                      "nonce": {
                        "type": "number",
                        "minimum": 0,
                        "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
                      },
                      "fee": {
                        "description": "The custom defined fee; if not present, will be calculated automatically",
                        "type": "object",
                        "required": [
                          "gasLimit",
                          "gasPrice"
                        ],
                        "properties": {
                          "gasPrice": {
                            "type": "string",
                            "description": "The price for one gas unit (in Gwei)",
                            "pattern": "^[+]?\\d+$",
                            "example": "20"
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                            "pattern": "^[+]?\\d+$",
                            "example": "40000"
                          }
                        }
                      }
                    },
                    "required": [
                      "data",
                      "chain",
                      "signatureId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 130000,
                        "description": "The data to be stored on the blockchain",
                        "example": "My example log data"
                      },
                      "chain": {
                        "description": "The blockchain to store the data on",
                        "enum": [
                          "CELO"
                        ],
                        "example": "CELO",
                        "type": "string"
                      },
                      "feeCurrency": {
                        "type": "string",
                        "description": "The currency in which the transaction fee will be paid",
                        "enum": [
                          "CELO",
                          "CUSD",
                          "CEUR"
                        ]
                      },
                      "fee": {
                        "description": "The custom defined fee; if not present, will be calculated automatically",
                        "type": "object",
                        "required": [
                          "gasLimit",
                          "gasPrice"
                        ],
                        "properties": {
                          "gasPrice": {
                            "type": "string",
                            "description": "The price for one gas unit (in Gwei)",
                            "pattern": "^[+]?\\d+$",
                            "example": "20"
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                            "pattern": "^[+]?\\d+$",
                            "example": "40000"
                          }
                        }
                      },
                      "fromPrivateKey": {
                        "type": "string",
                        "maxLength": 66,
                        "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
                        "minLength": 66,
                        "description": "Private key of account, from which the transaction will be initiated. If not present, transaction fee will be debited from Tatum internal account and additional credits will be charged."
                      },
                      "nonce": {
                        "type": "number",
                        "minimum": 0,
                        "description": "Nonce to be set to Ethereum transaction. If not present, last known nonce will be used."
                      },
                      "to": {
                        "description": "The blockchain address to store the data on<br/>If not provided, the data will be stored on the address from which the transaction is made.",
                        "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                      }
                    },
                    "required": [
                      "data",
                      "feeCurrency",
                      "chain",
                      "fromPrivateKey"
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The custom defined fee; if not present, will be calculated automatically",
                  "type": "object",
                  "required": [
                    "gasLimit",
                    "gasPrice"
                  ],
                  "properties": {
                    "gasPrice": {
                      "type": "string",
                      "description": "The price for one gas unit (in Gwei)",
                      "pattern": "^[+]?\\d+$",
                      "example": "20"
                    },
                    "gasLimit": {
                      "type": "string",
                      "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                      "pattern": "^[+]?\\d+$",
                      "example": "40000"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "description": "ethereum.broadcast.failed",
                          "example": "ethereum.broadcast.failed",
                          "type": "string"
                        },
                        "message": {
                          "description": "Unable to broadcast transaction due to ${error}.",
                          "example": "Unable to broadcast transaction due to ${error}.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "description": "gas.price.failed",
                          "example": "gas.price.failed",
                          "type": "string"
                        },
                        "message": {
                          "description": "Unable to obtain current GAS price.",
                          "example": "Unable to obtain current GAS price.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "description": "ethereum.transaction.body",
                          "example": "ethereum.transaction.body",
                          "type": "string"
                        },
                        "message": {
                          "description": "Either currency, or tokenAddress must be defined.",
                          "example": "Either currency, or tokenAddress must be defined.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "description": "eth.transaction.gas",
                          "example": "eth.transaction.gas",
                          "type": "string"
                        },
                        "message": {
                          "description": "Unable to calculate gas limit for transaction. ${error}",
                          "example": "Unable to calculate gas limit for transaction. ${error}",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "description": "eth.transaction.hash",
                          "example": "eth.transaction.hash",
                          "type": "string"
                        },
                        "message": {
                          "description": "Unable to calculate transaction hash. ${error}",
                          "example": "Unable to calculate transaction hash. ${error}",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "description": "eth.transaction.sign",
                          "example": "eth.transaction.sign",
                          "type": "string"
                        },
                        "message": {
                          "description": "Unable to sign transaction. ${error}",
                          "example": "Unable to sign transaction. ${error}",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Store a log record",
        "tags": [
          "Blockchain storage"
        ]
      },
      "get": {
        "description": "<p style=\"display: none\">/v3/record</p>\n<p><b>1 credit per API call</b></p>\n<p>Get a log data record from the Ethereum blockchain (only the mainnet or the Sepolia testnet).</p>\n",
        "operationId": "GetLog",
        "parameters": [
          {
            "description": "The blockchain to get the log record from",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ETH",
              "enum": [
                "ETH"
              ]
            }
          },
          {
            "description": "The ID of the log record or transaction to get from the blockchain",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326",
              "minLength": 1,
              "maxLength": 100
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "The data stored in the requested record",
                      "example": "My example log data"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "description": "tx.missing",
                          "example": "tx.missing",
                          "type": "string"
                        },
                        "message": {
                          "description": "No such tx.",
                          "example": "No such tx.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "403",
                          "example": 403,
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get a log record",
        "tags": [
          "Blockchain storage"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "X-API-Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "description": "Your **API key** is used to identify your account & your plan, including the number of API calls per second and total monthly calls you have.\n\nEach key is for individual use only.\n\nIf you don't have a key already you can [Sign up for a Free Tatum account](https://co.tatum.io/signup) to get two keys (testnet and mainnet), allowing up to 5 API calls per second and 1,000,000 Credits.\n\nFor testing purposes, you can use the following key which only works inside docs and has limited functionality (e.g. you cannot create virtual accounts or notification subscriptions with it):\n* t-66a730ccccfd17001c479705-2f597d14ad7543f289a03418\n\nFor more details on limits and plans, [click here](https://docs.tatum.io/docs/plans-limits).\n"
      }
    },
    "responses": {
      "Error400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errorCode": {
                  "example": "validation.failed",
                  "description": "validation.failed",
                  "type": "string"
                },
                "message": {
                  "example": "Request validation failed. Please see data for additional information.",
                  "description": "Request validation failed. Please see data for additional information.",
                  "type": "string"
                },
                "statusCode": {
                  "example": 400,
                  "description": "400",
                  "type": "number"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "target"
                    ],
                    "properties": {
                      "target": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Request object present in the body of the HTTP request",
                        "example": {
                          "property": 12345
                        }
                      },
                      "value": {
                        "type": "number",
                        "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                        "example": 12345
                      },
                      "property": {
                        "type": "string",
                        "description": "Property name of the target object which validation is wrong",
                        "example": "property1"
                      },
                      "constraints": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                        "example": {
                          "min": "property1 must not be less than 50000"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "errorCode",
                "message",
                "statusCode",
                "data"
              ],
              "type": "object"
            }
          }
        }
      },
      "Error401": {
        "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "properties": {
                    "errorCode": {
                      "example": "subscription.not.active",
                      "description": "subscription.not.active",
                      "type": "string"
                    },
                    "message": {
                      "example": "Subscription not active anymore.",
                      "description": "Subscription not active anymore.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 401,
                      "description": "401",
                      "type": "number"
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "errorCode": {
                      "example": "subscription.invalid",
                      "description": "subscription.invalid",
                      "type": "string"
                    },
                    "message": {
                      "example": "Unable to find valid subscription for '${apiKey}'",
                      "description": "Unable to find valid subscription for '${apiKey}'",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 401,
                      "description": "401",
                      "type": "number"
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode"
                  ],
                  "type": "object"
                }
              ]
            }
          }
        }
      },
      "Error403": {
        "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "example": "Forbidden",
                  "description": "Forbidden",
                  "type": "string"
                },
                "statusCode": {
                  "example": 403,
                  "description": "403",
                  "type": "number"
                }
              },
              "required": [
                "statusCode",
                "message"
              ],
              "type": "object"
            }
          }
        }
      },
      "Error500": {
        "description": "Internal server error. There was an error on the server during the processing of the request.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "example": "Internal server error",
                  "description": "Internal server error",
                  "type": "string"
                },
                "statusCode": {
                  "example": 500,
                  "description": "500",
                  "type": "number"
                }
              },
              "required": [
                "statusCode",
                "message"
              ],
              "type": "object"
            }
          }
        }
      }
    },
    "schemas": {
      "CustomFee": {
        "description": "The custom defined fee; if not present, will be calculated automatically",
        "type": "object",
        "required": [
          "gasLimit",
          "gasPrice"
        ],
        "properties": {
          "gasPrice": {
            "type": "string",
            "description": "The price for one gas unit (in Gwei)",
            "pattern": "^[+]?\\d+$",
            "example": "20"
          },
          "gasLimit": {
            "type": "string",
            "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
            "pattern": "^[+]?\\d+$",
            "example": "40000"
          }
        }
      },
      "TransactionHash": {
        "description": "The custom defined fee; if not present, will be calculated automatically",
        "type": "object",
        "required": [
          "gasLimit",
          "gasPrice"
        ],
        "properties": {
          "gasPrice": {
            "type": "string",
            "description": "The price for one gas unit (in Gwei)",
            "pattern": "^[+]?\\d+$",
            "example": "20"
          },
          "gasLimit": {
            "type": "string",
            "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
            "pattern": "^[+]?\\d+$",
            "example": "40000"
          }
        }
      },
      "Error403EthBroadcast": {
        "properties": {
          "errorCode": {
            "description": "ethereum.broadcast.failed",
            "example": "ethereum.broadcast.failed",
            "type": "string"
          },
          "message": {
            "description": "Unable to broadcast transaction due to ${error}.",
            "example": "Unable to broadcast transaction due to ${error}.",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403EthGasPrice": {
        "properties": {
          "errorCode": {
            "description": "gas.price.failed",
            "example": "gas.price.failed",
            "type": "string"
          },
          "message": {
            "description": "Unable to obtain current GAS price.",
            "example": "Unable to obtain current GAS price.",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403EthTxBody": {
        "properties": {
          "errorCode": {
            "description": "ethereum.transaction.body",
            "example": "ethereum.transaction.body",
            "type": "string"
          },
          "message": {
            "description": "Either currency, or tokenAddress must be defined.",
            "example": "Either currency, or tokenAddress must be defined.",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403EthGasCalculation": {
        "properties": {
          "errorCode": {
            "description": "eth.transaction.gas",
            "example": "eth.transaction.gas",
            "type": "string"
          },
          "message": {
            "description": "Unable to calculate gas limit for transaction. ${error}",
            "example": "Unable to calculate gas limit for transaction. ${error}",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403EthTxHash": {
        "properties": {
          "errorCode": {
            "description": "eth.transaction.hash",
            "example": "eth.transaction.hash",
            "type": "string"
          },
          "message": {
            "description": "Unable to calculate transaction hash. ${error}",
            "example": "Unable to calculate transaction hash. ${error}",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403EthTxSign": {
        "properties": {
          "errorCode": {
            "description": "eth.transaction.sign",
            "example": "eth.transaction.sign",
            "type": "string"
          },
          "message": {
            "description": "Unable to sign transaction. ${error}",
            "example": "Unable to sign transaction. ${error}",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403TxNotFound": {
        "properties": {
          "errorCode": {
            "description": "tx.missing",
            "example": "tx.missing",
            "type": "string"
          },
          "message": {
            "description": "No such tx.",
            "example": "No such tx.",
            "type": "string"
          },
          "statusCode": {
            "description": "403",
            "example": 403,
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "CreateRecord": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "minLength": 1,
            "maxLength": 130000,
            "description": "The data to be stored on the blockchain",
            "example": "My example log data"
          },
          "chain": {
            "description": "The blockchain to store the data on",
            "enum": [
              "BSC",
              "EGLD",
              "ETH",
              "KLAY",
              "MATIC",
              "ONE",
              "XDC"
            ],
            "example": "ETH",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the blockchain address from which the transaction will be made and the transaction fee will be deducted"
          },
          "from": {
            "type": "string",
            "maxLength": 62,
            "example": "erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7",
            "minLength": 42,
            "description": "(Elrond only; required) The blockchain address from which the transaction will be made<br/>This is a mandatory parameter for Elrond. Do not use it with any other blockchain."
          },
          "to": {
            "description": "The blockchain address to store the data on<br/>If not provided, the data will be stored on the address from which the transaction is made.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "maxLength": 42,
            "minLength": 42,
            "type": "string"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fromShardID": {
            "type": "number",
            "minimum": 0,
            "maximum": 4,
            "description": "(Harmony only) The ID of the shard from which the data should be read"
          },
          "toShardID": {
            "type": "number",
            "minimum": 0,
            "maximum": 4,
            "description": "(Harmony only) The ID of the shard to which the data should be recorded"
          },
          "ethFee": {
            "description": "(Ethereum only) The custom defined fee; if not present, will be calculated automatically",
            "type": "object",
            "required": [
              "gasLimit",
              "gasPrice"
            ],
            "properties": {
              "gasPrice": {
                "type": "string",
                "description": "The price for one gas unit (in Gwei)",
                "pattern": "^[+]?\\d+$",
                "example": "20"
              },
              "gasLimit": {
                "type": "string",
                "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                "pattern": "^[+]?\\d+$",
                "example": "40000"
              }
            }
          }
        },
        "required": [
          "data",
          "chain",
          "fromPrivateKey"
        ]
      },
      "CreateRecordKMS": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "minLength": 1,
            "maxLength": 130000,
            "description": "The data to be stored on the blockchain",
            "example": "My example log data"
          },
          "chain": {
            "description": "The blockchain to store the data on",
            "enum": [
              "ETH"
            ],
            "example": "ETH",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\n"
          },
          "index": {
            "description": "Derivation index of sender address.",
            "maximum": 2147483647,
            "example": 0,
            "type": "integer"
          },
          "to": {
            "description": "The blockchain address to store the data on<br/>If not provided, the data will be stored on the address from which the transaction is made.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "maxLength": 42,
            "minLength": 42,
            "type": "string"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "description": "The custom defined fee; if not present, will be calculated automatically",
            "type": "object",
            "required": [
              "gasLimit",
              "gasPrice"
            ],
            "properties": {
              "gasPrice": {
                "type": "string",
                "description": "The price for one gas unit (in Gwei)",
                "pattern": "^[+]?\\d+$",
                "example": "20"
              },
              "gasLimit": {
                "type": "string",
                "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                "pattern": "^[+]?\\d+$",
                "example": "40000"
              }
            }
          }
        },
        "required": [
          "data",
          "chain",
          "signatureId"
        ]
      },
      "CreateRecordCelo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "minLength": 1,
            "maxLength": 130000,
            "description": "The data to be stored on the blockchain",
            "example": "My example log data"
          },
          "chain": {
            "description": "The blockchain to store the data on",
            "enum": [
              "CELO"
            ],
            "example": "CELO",
            "type": "string"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          },
          "fee": {
            "description": "The custom defined fee; if not present, will be calculated automatically",
            "type": "object",
            "required": [
              "gasLimit",
              "gasPrice"
            ],
            "properties": {
              "gasPrice": {
                "type": "string",
                "description": "The price for one gas unit (in Gwei)",
                "pattern": "^[+]?\\d+$",
                "example": "20"
              },
              "gasLimit": {
                "type": "string",
                "description": "The maximum number of gas units that you are willing to spend on processing the transaction at the provided gas price",
                "pattern": "^[+]?\\d+$",
                "example": "40000"
              }
            }
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of account, from which the transaction will be initiated. If not present, transaction fee will be debited from Tatum internal account and additional credits will be charged."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "Nonce to be set to Ethereum transaction. If not present, last known nonce will be used."
          },
          "to": {
            "description": "The blockchain address to store the data on<br/>If not provided, the data will be stored on the address from which the transaction is made.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "maxLength": 42,
            "minLength": 42,
            "type": "string"
          }
        },
        "required": [
          "data",
          "feeCurrency",
          "chain",
          "fromPrivateKey"
        ]
      }
    }
  }
}